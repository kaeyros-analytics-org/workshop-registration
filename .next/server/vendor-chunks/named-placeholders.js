"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/named-placeholders";
exports.ids = ["vendor-chunks/named-placeholders"];
exports.modules = {

/***/ "(rsc)/./node_modules/named-placeholders/index.js":
/*!**************************************************!*\
  !*** ./node_modules/named-placeholders/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// based on code from Brian White @mscdex mariasql library - https://github.com/mscdex/node-mariasql/blob/master/lib/Client.js#L272-L332\n// License: https://github.com/mscdex/node-mariasql/blob/master/LICENSE\nconst RE_PARAM = /(?:\\?)|(?::(\\d+|(?:[a-zA-Z][a-zA-Z0-9_]*)))/g, DQUOTE = 34, SQUOTE = 39, BSLASH = 92;\nfunction parse(query) {\n    let ppos = RE_PARAM.exec(query);\n    let curpos = 0;\n    let start = 0;\n    let end;\n    const parts = [];\n    let inQuote = false;\n    let escape = false;\n    let qchr;\n    const tokens = [];\n    let qcnt = 0;\n    let lastTokenEndPos = 0;\n    let i;\n    if (ppos) {\n        do {\n            for(i = curpos, end = ppos.index; i < end; ++i){\n                let chr = query.charCodeAt(i);\n                if (chr === BSLASH) escape = !escape;\n                else {\n                    if (escape) {\n                        escape = false;\n                        continue;\n                    }\n                    if (inQuote && chr === qchr) {\n                        if (query.charCodeAt(i + 1) === qchr) {\n                            // quote escaped via \"\" or ''\n                            ++i;\n                            continue;\n                        }\n                        inQuote = false;\n                    } else if (chr === DQUOTE || chr === SQUOTE) {\n                        inQuote = true;\n                        qchr = chr;\n                    }\n                }\n            }\n            if (!inQuote) {\n                parts.push(query.substring(start, end));\n                tokens.push(ppos[0].length === 1 ? qcnt++ : ppos[1]);\n                start = end + ppos[0].length;\n                lastTokenEndPos = start;\n            }\n            curpos = end + ppos[0].length;\n        }while (ppos = RE_PARAM.exec(query));\n        if (tokens.length) {\n            if (curpos < query.length) {\n                parts.push(query.substring(lastTokenEndPos));\n            }\n            return [\n                parts,\n                tokens\n            ];\n        }\n    }\n    return [\n        query\n    ];\n}\n;\nfunction createCompiler(config) {\n    if (!config) config = {};\n    if (!config.placeholder) {\n        config.placeholder = \"?\";\n    }\n    let ncache = 100;\n    let cache;\n    if (typeof config.cache === \"number\") {\n        ncache = config.cache;\n    }\n    if (typeof config.cache === \"object\") {\n        cache = config.cache;\n    }\n    if (config.cache !== false && !cache) {\n        cache = new (__webpack_require__(/*! lru-cache */ \"(rsc)/./node_modules/named-placeholders/node_modules/lru-cache/index.js\"))({\n            max: ncache\n        });\n    }\n    function toArrayParams(tree, params) {\n        const arr = [];\n        if (tree.length == 1) {\n            return [\n                tree[0],\n                []\n            ];\n        }\n        if (typeof params == \"undefined\") throw new Error(\"Named query contains placeholders, but parameters object is undefined\");\n        const tokens = tree[1];\n        for(let i = 0; i < tokens.length; ++i){\n            arr.push(params[tokens[i]]);\n        }\n        return [\n            tree[0],\n            arr\n        ];\n    }\n    function noTailingSemicolon(s) {\n        if (s.slice(-1) == \":\") {\n            return s.slice(0, -1);\n        }\n        return s;\n    }\n    function join(tree) {\n        if (tree.length == 1) {\n            return tree;\n        }\n        let unnamed = noTailingSemicolon(tree[0][0]);\n        for(let i = 1; i < tree[0].length; ++i){\n            if (tree[0][i - 1].slice(-1) == \":\") {\n                unnamed += config.placeholder;\n            }\n            unnamed += config.placeholder;\n            unnamed += noTailingSemicolon(tree[0][i]);\n        }\n        const last = tree[0][tree[0].length - 1];\n        if (tree[0].length == tree[1].length) {\n            if (last.slice(-1) == \":\") {\n                unnamed += config.placeholder;\n            }\n            unnamed += config.placeholder;\n        }\n        return [\n            unnamed,\n            tree[1]\n        ];\n    }\n    function compile(query, paramsObj) {\n        let tree;\n        if (cache && (tree = cache.get(query))) {\n            return toArrayParams(tree, paramsObj);\n        }\n        tree = join(parse(query));\n        if (cache) {\n            cache.set(query, tree);\n        }\n        return toArrayParams(tree, paramsObj);\n    }\n    compile.parse = parse;\n    return compile;\n}\n// named :one :two to postgres-style numbered $1 $2 $3\nfunction toNumbered(q, params) {\n    const tree = parse(q);\n    const paramsArr = [];\n    if (tree.length == 1) {\n        return [\n            tree[0],\n            paramsArr\n        ];\n    }\n    const pIndexes = {};\n    let pLastIndex = 0;\n    let qs = \"\";\n    let varIndex;\n    const varNames = [];\n    for(let i = 0; i < tree[0].length; ++i){\n        varIndex = pIndexes[tree[1][i]];\n        if (!varIndex) {\n            varIndex = ++pLastIndex;\n            pIndexes[tree[1][i]] = varIndex;\n        }\n        if (tree[1][i]) {\n            varNames[varIndex - 1] = tree[1][i];\n            qs += tree[0][i] + \"$\" + varIndex;\n        } else {\n            qs += tree[0][i];\n        }\n    }\n    return [\n        qs,\n        varNames.map((n)=>params[n])\n    ];\n}\nmodule.exports = createCompiler;\nmodule.exports.toNumbered = toNumbered;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/named-placeholders/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/named-placeholders/node_modules/lru-cache/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/named-placeholders/node_modules/lru-cache/index.js ***!
  \*************************************************************************/
/***/ ((module) => {

eval("\nconst perf = typeof performance === \"object\" && performance && typeof performance.now === \"function\" ? performance : Date;\nconst hasAbortController = typeof AbortController === \"function\";\n// minimal backwards-compatibility polyfill\n// this doesn't have nearly all the checks and whatnot that\n// actual AbortController/Signal has, but it's enough for\n// our purposes, and if used properly, behaves the same.\nconst AC = hasAbortController ? AbortController : class AbortController1 {\n    constructor(){\n        this.signal = new AS();\n    }\n    abort(reason = new Error(\"This operation was aborted\")) {\n        this.signal.reason = this.signal.reason || reason;\n        this.signal.aborted = true;\n        this.signal.dispatchEvent({\n            type: \"abort\",\n            target: this.signal\n        });\n    }\n};\nconst hasAbortSignal = typeof AbortSignal === \"function\";\n// Some polyfills put this on the AC class, not global\nconst hasACAbortSignal = typeof AC.AbortSignal === \"function\";\nconst AS = hasAbortSignal ? AbortSignal : hasACAbortSignal ? AC.AbortController : class AbortSignal1 {\n    constructor(){\n        this.reason = undefined;\n        this.aborted = false;\n        this._listeners = [];\n    }\n    dispatchEvent(e) {\n        if (e.type === \"abort\") {\n            this.aborted = true;\n            this.onabort(e);\n            this._listeners.forEach((f)=>f(e), this);\n        }\n    }\n    onabort() {}\n    addEventListener(ev, fn) {\n        if (ev === \"abort\") {\n            this._listeners.push(fn);\n        }\n    }\n    removeEventListener(ev, fn) {\n        if (ev === \"abort\") {\n            this._listeners = this._listeners.filter((f)=>f !== fn);\n        }\n    }\n};\nconst warned = new Set();\nconst deprecatedOption = (opt, instead)=>{\n    const code = `LRU_CACHE_OPTION_${opt}`;\n    if (shouldWarn(code)) {\n        warn(code, `${opt} option`, `options.${instead}`, LRUCache);\n    }\n};\nconst deprecatedMethod = (method, instead)=>{\n    const code = `LRU_CACHE_METHOD_${method}`;\n    if (shouldWarn(code)) {\n        const { prototype } = LRUCache;\n        const { get } = Object.getOwnPropertyDescriptor(prototype, method);\n        warn(code, `${method} method`, `cache.${instead}()`, get);\n    }\n};\nconst deprecatedProperty = (field, instead)=>{\n    const code = `LRU_CACHE_PROPERTY_${field}`;\n    if (shouldWarn(code)) {\n        const { prototype } = LRUCache;\n        const { get } = Object.getOwnPropertyDescriptor(prototype, field);\n        warn(code, `${field} property`, `cache.${instead}`, get);\n    }\n};\nconst emitWarning = (...a)=>{\n    typeof process === \"object\" && process && typeof process.emitWarning === \"function\" ? process.emitWarning(...a) : console.error(...a);\n};\nconst shouldWarn = (code)=>!warned.has(code);\nconst warn = (code, what, instead, fn)=>{\n    warned.add(code);\n    const msg = `The ${what} is deprecated. Please use ${instead} instead.`;\n    emitWarning(msg, \"DeprecationWarning\", code, fn);\n};\nconst isPosInt = (n)=>n && n === Math.floor(n) && n > 0 && isFinite(n);\n/* istanbul ignore next - This is a little bit ridiculous, tbh.\n * The maximum array length is 2^32-1 or thereabouts on most JS impls.\n * And well before that point, you're caching the entire world, I mean,\n * that's ~32GB of just integers for the next/prev links, plus whatever\n * else to hold that many keys and values.  Just filling the memory with\n * zeroes at init time is brutal when you get that big.\n * But why not be complete?\n * Maybe in the future, these limits will have expanded. */ const getUintArray = (max)=>!isPosInt(max) ? null : max <= Math.pow(2, 8) ? Uint8Array : max <= Math.pow(2, 16) ? Uint16Array : max <= Math.pow(2, 32) ? Uint32Array : max <= Number.MAX_SAFE_INTEGER ? ZeroArray : null;\nclass ZeroArray extends Array {\n    constructor(size){\n        super(size);\n        this.fill(0);\n    }\n}\nclass Stack {\n    constructor(max){\n        if (max === 0) {\n            return [];\n        }\n        const UintArray = getUintArray(max);\n        this.heap = new UintArray(max);\n        this.length = 0;\n    }\n    push(n) {\n        this.heap[this.length++] = n;\n    }\n    pop() {\n        return this.heap[--this.length];\n    }\n}\nclass LRUCache {\n    constructor(options = {}){\n        const { max = 0, ttl, ttlResolution = 1, ttlAutopurge, updateAgeOnGet, updateAgeOnHas, allowStale, dispose, disposeAfter, noDisposeOnSet, noUpdateTTL, maxSize = 0, maxEntrySize = 0, sizeCalculation, fetchMethod, fetchContext, noDeleteOnFetchRejection, noDeleteOnStaleGet, allowStaleOnFetchRejection, allowStaleOnFetchAbort, ignoreFetchAbort } = options;\n        // deprecated options, don't trigger a warning for getting them if\n        // the thing being passed in is another LRUCache we're copying.\n        const { length, maxAge, stale } = options instanceof LRUCache ? {} : options;\n        if (max !== 0 && !isPosInt(max)) {\n            throw new TypeError(\"max option must be a nonnegative integer\");\n        }\n        const UintArray = max ? getUintArray(max) : Array;\n        if (!UintArray) {\n            throw new Error(\"invalid max value: \" + max);\n        }\n        this.max = max;\n        this.maxSize = maxSize;\n        this.maxEntrySize = maxEntrySize || this.maxSize;\n        this.sizeCalculation = sizeCalculation || length;\n        if (this.sizeCalculation) {\n            if (!this.maxSize && !this.maxEntrySize) {\n                throw new TypeError(\"cannot set sizeCalculation without setting maxSize or maxEntrySize\");\n            }\n            if (typeof this.sizeCalculation !== \"function\") {\n                throw new TypeError(\"sizeCalculation set to non-function\");\n            }\n        }\n        this.fetchMethod = fetchMethod || null;\n        if (this.fetchMethod && typeof this.fetchMethod !== \"function\") {\n            throw new TypeError(\"fetchMethod must be a function if specified\");\n        }\n        this.fetchContext = fetchContext;\n        if (!this.fetchMethod && fetchContext !== undefined) {\n            throw new TypeError(\"cannot set fetchContext without fetchMethod\");\n        }\n        this.keyMap = new Map();\n        this.keyList = new Array(max).fill(null);\n        this.valList = new Array(max).fill(null);\n        this.next = new UintArray(max);\n        this.prev = new UintArray(max);\n        this.head = 0;\n        this.tail = 0;\n        this.free = new Stack(max);\n        this.initialFill = 1;\n        this.size = 0;\n        if (typeof dispose === \"function\") {\n            this.dispose = dispose;\n        }\n        if (typeof disposeAfter === \"function\") {\n            this.disposeAfter = disposeAfter;\n            this.disposed = [];\n        } else {\n            this.disposeAfter = null;\n            this.disposed = null;\n        }\n        this.noDisposeOnSet = !!noDisposeOnSet;\n        this.noUpdateTTL = !!noUpdateTTL;\n        this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;\n        this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;\n        this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;\n        this.ignoreFetchAbort = !!ignoreFetchAbort;\n        // NB: maxEntrySize is set to maxSize if it's set\n        if (this.maxEntrySize !== 0) {\n            if (this.maxSize !== 0) {\n                if (!isPosInt(this.maxSize)) {\n                    throw new TypeError(\"maxSize must be a positive integer if specified\");\n                }\n            }\n            if (!isPosInt(this.maxEntrySize)) {\n                throw new TypeError(\"maxEntrySize must be a positive integer if specified\");\n            }\n            this.initializeSizeTracking();\n        }\n        this.allowStale = !!allowStale || !!stale;\n        this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;\n        this.updateAgeOnGet = !!updateAgeOnGet;\n        this.updateAgeOnHas = !!updateAgeOnHas;\n        this.ttlResolution = isPosInt(ttlResolution) || ttlResolution === 0 ? ttlResolution : 1;\n        this.ttlAutopurge = !!ttlAutopurge;\n        this.ttl = ttl || maxAge || 0;\n        if (this.ttl) {\n            if (!isPosInt(this.ttl)) {\n                throw new TypeError(\"ttl must be a positive integer if specified\");\n            }\n            this.initializeTTLTracking();\n        }\n        // do not allow completely unbounded caches\n        if (this.max === 0 && this.ttl === 0 && this.maxSize === 0) {\n            throw new TypeError(\"At least one of max, maxSize, or ttl is required\");\n        }\n        if (!this.ttlAutopurge && !this.max && !this.maxSize) {\n            const code = \"LRU_CACHE_UNBOUNDED\";\n            if (shouldWarn(code)) {\n                warned.add(code);\n                const msg = \"TTL caching without ttlAutopurge, max, or maxSize can \" + \"result in unbounded memory consumption.\";\n                emitWarning(msg, \"UnboundedCacheWarning\", code, LRUCache);\n            }\n        }\n        if (stale) {\n            deprecatedOption(\"stale\", \"allowStale\");\n        }\n        if (maxAge) {\n            deprecatedOption(\"maxAge\", \"ttl\");\n        }\n        if (length) {\n            deprecatedOption(\"length\", \"sizeCalculation\");\n        }\n    }\n    getRemainingTTL(key) {\n        return this.has(key, {\n            updateAgeOnHas: false\n        }) ? Infinity : 0;\n    }\n    initializeTTLTracking() {\n        this.ttls = new ZeroArray(this.max);\n        this.starts = new ZeroArray(this.max);\n        this.setItemTTL = (index, ttl, start = perf.now())=>{\n            this.starts[index] = ttl !== 0 ? start : 0;\n            this.ttls[index] = ttl;\n            if (ttl !== 0 && this.ttlAutopurge) {\n                const t = setTimeout(()=>{\n                    if (this.isStale(index)) {\n                        this.delete(this.keyList[index]);\n                    }\n                }, ttl + 1);\n                /* istanbul ignore else - unref() not supported on all platforms */ if (t.unref) {\n                    t.unref();\n                }\n            }\n        };\n        this.updateItemAge = (index)=>{\n            this.starts[index] = this.ttls[index] !== 0 ? perf.now() : 0;\n        };\n        this.statusTTL = (status, index)=>{\n            if (status) {\n                status.ttl = this.ttls[index];\n                status.start = this.starts[index];\n                status.now = cachedNow || getNow();\n                status.remainingTTL = status.now + status.ttl - status.start;\n            }\n        };\n        // debounce calls to perf.now() to 1s so we're not hitting\n        // that costly call repeatedly.\n        let cachedNow = 0;\n        const getNow = ()=>{\n            const n = perf.now();\n            if (this.ttlResolution > 0) {\n                cachedNow = n;\n                const t = setTimeout(()=>cachedNow = 0, this.ttlResolution);\n                /* istanbul ignore else - not available on all platforms */ if (t.unref) {\n                    t.unref();\n                }\n            }\n            return n;\n        };\n        this.getRemainingTTL = (key)=>{\n            const index = this.keyMap.get(key);\n            if (index === undefined) {\n                return 0;\n            }\n            return this.ttls[index] === 0 || this.starts[index] === 0 ? Infinity : this.starts[index] + this.ttls[index] - (cachedNow || getNow());\n        };\n        this.isStale = (index)=>{\n            return this.ttls[index] !== 0 && this.starts[index] !== 0 && (cachedNow || getNow()) - this.starts[index] > this.ttls[index];\n        };\n    }\n    updateItemAge(_index) {}\n    statusTTL(_status, _index) {}\n    setItemTTL(_index, _ttl, _start) {}\n    isStale(_index) {\n        return false;\n    }\n    initializeSizeTracking() {\n        this.calculatedSize = 0;\n        this.sizes = new ZeroArray(this.max);\n        this.removeItemSize = (index)=>{\n            this.calculatedSize -= this.sizes[index];\n            this.sizes[index] = 0;\n        };\n        this.requireSize = (k, v, size, sizeCalculation)=>{\n            // provisionally accept background fetches.\n            // actual value size will be checked when they return.\n            if (this.isBackgroundFetch(v)) {\n                return 0;\n            }\n            if (!isPosInt(size)) {\n                if (sizeCalculation) {\n                    if (typeof sizeCalculation !== \"function\") {\n                        throw new TypeError(\"sizeCalculation must be a function\");\n                    }\n                    size = sizeCalculation(v, k);\n                    if (!isPosInt(size)) {\n                        throw new TypeError(\"sizeCalculation return invalid (expect positive integer)\");\n                    }\n                } else {\n                    throw new TypeError(\"invalid size value (must be positive integer). \" + \"When maxSize or maxEntrySize is used, sizeCalculation or size \" + \"must be set.\");\n                }\n            }\n            return size;\n        };\n        this.addItemSize = (index, size, status)=>{\n            this.sizes[index] = size;\n            if (this.maxSize) {\n                const maxSize = this.maxSize - this.sizes[index];\n                while(this.calculatedSize > maxSize){\n                    this.evict(true);\n                }\n            }\n            this.calculatedSize += this.sizes[index];\n            if (status) {\n                status.entrySize = size;\n                status.totalCalculatedSize = this.calculatedSize;\n            }\n        };\n    }\n    removeItemSize(_index) {}\n    addItemSize(_index, _size) {}\n    requireSize(_k, _v, size, sizeCalculation) {\n        if (size || sizeCalculation) {\n            throw new TypeError(\"cannot set size without setting maxSize or maxEntrySize on cache\");\n        }\n    }\n    *indexes({ allowStale = this.allowStale } = {}) {\n        if (this.size) {\n            for(let i = this.tail; true;){\n                if (!this.isValidIndex(i)) {\n                    break;\n                }\n                if (allowStale || !this.isStale(i)) {\n                    yield i;\n                }\n                if (i === this.head) {\n                    break;\n                } else {\n                    i = this.prev[i];\n                }\n            }\n        }\n    }\n    *rindexes({ allowStale = this.allowStale } = {}) {\n        if (this.size) {\n            for(let i = this.head; true;){\n                if (!this.isValidIndex(i)) {\n                    break;\n                }\n                if (allowStale || !this.isStale(i)) {\n                    yield i;\n                }\n                if (i === this.tail) {\n                    break;\n                } else {\n                    i = this.next[i];\n                }\n            }\n        }\n    }\n    isValidIndex(index) {\n        return index !== undefined && this.keyMap.get(this.keyList[index]) === index;\n    }\n    *entries() {\n        for (const i of this.indexes()){\n            if (this.valList[i] !== undefined && this.keyList[i] !== undefined && !this.isBackgroundFetch(this.valList[i])) {\n                yield [\n                    this.keyList[i],\n                    this.valList[i]\n                ];\n            }\n        }\n    }\n    *rentries() {\n        for (const i of this.rindexes()){\n            if (this.valList[i] !== undefined && this.keyList[i] !== undefined && !this.isBackgroundFetch(this.valList[i])) {\n                yield [\n                    this.keyList[i],\n                    this.valList[i]\n                ];\n            }\n        }\n    }\n    *keys() {\n        for (const i of this.indexes()){\n            if (this.keyList[i] !== undefined && !this.isBackgroundFetch(this.valList[i])) {\n                yield this.keyList[i];\n            }\n        }\n    }\n    *rkeys() {\n        for (const i of this.rindexes()){\n            if (this.keyList[i] !== undefined && !this.isBackgroundFetch(this.valList[i])) {\n                yield this.keyList[i];\n            }\n        }\n    }\n    *values() {\n        for (const i of this.indexes()){\n            if (this.valList[i] !== undefined && !this.isBackgroundFetch(this.valList[i])) {\n                yield this.valList[i];\n            }\n        }\n    }\n    *rvalues() {\n        for (const i of this.rindexes()){\n            if (this.valList[i] !== undefined && !this.isBackgroundFetch(this.valList[i])) {\n                yield this.valList[i];\n            }\n        }\n    }\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n    find(fn, getOptions) {\n        for (const i of this.indexes()){\n            const v = this.valList[i];\n            const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;\n            if (value === undefined) continue;\n            if (fn(value, this.keyList[i], this)) {\n                return this.get(this.keyList[i], getOptions);\n            }\n        }\n    }\n    forEach(fn, thisp = this) {\n        for (const i of this.indexes()){\n            const v = this.valList[i];\n            const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;\n            if (value === undefined) continue;\n            fn.call(thisp, value, this.keyList[i], this);\n        }\n    }\n    rforEach(fn, thisp = this) {\n        for (const i of this.rindexes()){\n            const v = this.valList[i];\n            const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;\n            if (value === undefined) continue;\n            fn.call(thisp, value, this.keyList[i], this);\n        }\n    }\n    get prune() {\n        deprecatedMethod(\"prune\", \"purgeStale\");\n        return this.purgeStale;\n    }\n    purgeStale() {\n        let deleted = false;\n        for (const i of this.rindexes({\n            allowStale: true\n        })){\n            if (this.isStale(i)) {\n                this.delete(this.keyList[i]);\n                deleted = true;\n            }\n        }\n        return deleted;\n    }\n    dump() {\n        const arr = [];\n        for (const i of this.indexes({\n            allowStale: true\n        })){\n            const key = this.keyList[i];\n            const v = this.valList[i];\n            const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;\n            if (value === undefined) continue;\n            const entry = {\n                value\n            };\n            if (this.ttls) {\n                entry.ttl = this.ttls[i];\n                // always dump the start relative to a portable timestamp\n                // it's ok for this to be a bit slow, it's a rare operation.\n                const age = perf.now() - this.starts[i];\n                entry.start = Math.floor(Date.now() - age);\n            }\n            if (this.sizes) {\n                entry.size = this.sizes[i];\n            }\n            arr.unshift([\n                key,\n                entry\n            ]);\n        }\n        return arr;\n    }\n    load(arr) {\n        this.clear();\n        for (const [key, entry] of arr){\n            if (entry.start) {\n                // entry.start is a portable timestamp, but we may be using\n                // node's performance.now(), so calculate the offset.\n                // it's ok for this to be a bit slow, it's a rare operation.\n                const age = Date.now() - entry.start;\n                entry.start = perf.now() - age;\n            }\n            this.set(key, entry.value, entry);\n        }\n    }\n    dispose(_v, _k, _reason) {}\n    set(k, v, { ttl = this.ttl, start, noDisposeOnSet = this.noDisposeOnSet, size = 0, sizeCalculation = this.sizeCalculation, noUpdateTTL = this.noUpdateTTL, status } = {}) {\n        size = this.requireSize(k, v, size, sizeCalculation);\n        // if the item doesn't fit, don't do anything\n        // NB: maxEntrySize set to maxSize by default\n        if (this.maxEntrySize && size > this.maxEntrySize) {\n            if (status) {\n                status.set = \"miss\";\n                status.maxEntrySizeExceeded = true;\n            }\n            // have to delete, in case a background fetch is there already.\n            // in non-async cases, this is a no-op\n            this.delete(k);\n            return this;\n        }\n        let index = this.size === 0 ? undefined : this.keyMap.get(k);\n        if (index === undefined) {\n            // addition\n            index = this.newIndex();\n            this.keyList[index] = k;\n            this.valList[index] = v;\n            this.keyMap.set(k, index);\n            this.next[this.tail] = index;\n            this.prev[index] = this.tail;\n            this.tail = index;\n            this.size++;\n            this.addItemSize(index, size, status);\n            if (status) {\n                status.set = \"add\";\n            }\n            noUpdateTTL = false;\n        } else {\n            // update\n            this.moveToTail(index);\n            const oldVal = this.valList[index];\n            if (v !== oldVal) {\n                if (this.isBackgroundFetch(oldVal)) {\n                    oldVal.__abortController.abort(new Error(\"replaced\"));\n                } else {\n                    if (!noDisposeOnSet) {\n                        this.dispose(oldVal, k, \"set\");\n                        if (this.disposeAfter) {\n                            this.disposed.push([\n                                oldVal,\n                                k,\n                                \"set\"\n                            ]);\n                        }\n                    }\n                }\n                this.removeItemSize(index);\n                this.valList[index] = v;\n                this.addItemSize(index, size, status);\n                if (status) {\n                    status.set = \"replace\";\n                    const oldValue = oldVal && this.isBackgroundFetch(oldVal) ? oldVal.__staleWhileFetching : oldVal;\n                    if (oldValue !== undefined) status.oldValue = oldValue;\n                }\n            } else if (status) {\n                status.set = \"update\";\n            }\n        }\n        if (ttl !== 0 && this.ttl === 0 && !this.ttls) {\n            this.initializeTTLTracking();\n        }\n        if (!noUpdateTTL) {\n            this.setItemTTL(index, ttl, start);\n        }\n        this.statusTTL(status, index);\n        if (this.disposeAfter) {\n            while(this.disposed.length){\n                this.disposeAfter(...this.disposed.shift());\n            }\n        }\n        return this;\n    }\n    newIndex() {\n        if (this.size === 0) {\n            return this.tail;\n        }\n        if (this.size === this.max && this.max !== 0) {\n            return this.evict(false);\n        }\n        if (this.free.length !== 0) {\n            return this.free.pop();\n        }\n        // initial fill, just keep writing down the list\n        return this.initialFill++;\n    }\n    pop() {\n        if (this.size) {\n            const val = this.valList[this.head];\n            this.evict(true);\n            return val;\n        }\n    }\n    evict(free) {\n        const head = this.head;\n        const k = this.keyList[head];\n        const v = this.valList[head];\n        if (this.isBackgroundFetch(v)) {\n            v.__abortController.abort(new Error(\"evicted\"));\n        } else {\n            this.dispose(v, k, \"evict\");\n            if (this.disposeAfter) {\n                this.disposed.push([\n                    v,\n                    k,\n                    \"evict\"\n                ]);\n            }\n        }\n        this.removeItemSize(head);\n        // if we aren't about to use the index, then null these out\n        if (free) {\n            this.keyList[head] = null;\n            this.valList[head] = null;\n            this.free.push(head);\n        }\n        this.head = this.next[head];\n        this.keyMap.delete(k);\n        this.size--;\n        return head;\n    }\n    has(k, { updateAgeOnHas = this.updateAgeOnHas, status } = {}) {\n        const index = this.keyMap.get(k);\n        if (index !== undefined) {\n            if (!this.isStale(index)) {\n                if (updateAgeOnHas) {\n                    this.updateItemAge(index);\n                }\n                if (status) status.has = \"hit\";\n                this.statusTTL(status, index);\n                return true;\n            } else if (status) {\n                status.has = \"stale\";\n                this.statusTTL(status, index);\n            }\n        } else if (status) {\n            status.has = \"miss\";\n        }\n        return false;\n    }\n    // like get(), but without any LRU updating or TTL expiration\n    peek(k, { allowStale = this.allowStale } = {}) {\n        const index = this.keyMap.get(k);\n        if (index !== undefined && (allowStale || !this.isStale(index))) {\n            const v = this.valList[index];\n            // either stale and allowed, or forcing a refresh of non-stale value\n            return this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;\n        }\n    }\n    backgroundFetch(k, index, options, context) {\n        const v = index === undefined ? undefined : this.valList[index];\n        if (this.isBackgroundFetch(v)) {\n            return v;\n        }\n        const ac = new AC();\n        if (options.signal) {\n            options.signal.addEventListener(\"abort\", ()=>ac.abort(options.signal.reason));\n        }\n        const fetchOpts = {\n            signal: ac.signal,\n            options,\n            context\n        };\n        const cb = (v, updateCache = false)=>{\n            const { aborted } = ac.signal;\n            const ignoreAbort = options.ignoreFetchAbort && v !== undefined;\n            if (options.status) {\n                if (aborted && !updateCache) {\n                    options.status.fetchAborted = true;\n                    options.status.fetchError = ac.signal.reason;\n                    if (ignoreAbort) options.status.fetchAbortIgnored = true;\n                } else {\n                    options.status.fetchResolved = true;\n                }\n            }\n            if (aborted && !ignoreAbort && !updateCache) {\n                return fetchFail(ac.signal.reason);\n            }\n            // either we didn't abort, and are still here, or we did, and ignored\n            if (this.valList[index] === p) {\n                if (v === undefined) {\n                    if (p.__staleWhileFetching) {\n                        this.valList[index] = p.__staleWhileFetching;\n                    } else {\n                        this.delete(k);\n                    }\n                } else {\n                    if (options.status) options.status.fetchUpdated = true;\n                    this.set(k, v, fetchOpts.options);\n                }\n            }\n            return v;\n        };\n        const eb = (er)=>{\n            if (options.status) {\n                options.status.fetchRejected = true;\n                options.status.fetchError = er;\n            }\n            return fetchFail(er);\n        };\n        const fetchFail = (er)=>{\n            const { aborted } = ac.signal;\n            const allowStaleAborted = aborted && options.allowStaleOnFetchAbort;\n            const allowStale = allowStaleAborted || options.allowStaleOnFetchRejection;\n            const noDelete = allowStale || options.noDeleteOnFetchRejection;\n            if (this.valList[index] === p) {\n                // if we allow stale on fetch rejections, then we need to ensure that\n                // the stale value is not removed from the cache when the fetch fails.\n                const del = !noDelete || p.__staleWhileFetching === undefined;\n                if (del) {\n                    this.delete(k);\n                } else if (!allowStaleAborted) {\n                    // still replace the *promise* with the stale value,\n                    // since we are done with the promise at this point.\n                    // leave it untouched if we're still waiting for an\n                    // aborted background fetch that hasn't yet returned.\n                    this.valList[index] = p.__staleWhileFetching;\n                }\n            }\n            if (allowStale) {\n                if (options.status && p.__staleWhileFetching !== undefined) {\n                    options.status.returnedStale = true;\n                }\n                return p.__staleWhileFetching;\n            } else if (p.__returned === p) {\n                throw er;\n            }\n        };\n        const pcall = (res, rej)=>{\n            this.fetchMethod(k, v, fetchOpts).then((v)=>res(v), rej);\n            // ignored, we go until we finish, regardless.\n            // defer check until we are actually aborting,\n            // so fetchMethod can override.\n            ac.signal.addEventListener(\"abort\", ()=>{\n                if (!options.ignoreFetchAbort || options.allowStaleOnFetchAbort) {\n                    res();\n                    // when it eventually resolves, update the cache.\n                    if (options.allowStaleOnFetchAbort) {\n                        res = (v)=>cb(v, true);\n                    }\n                }\n            });\n        };\n        if (options.status) options.status.fetchDispatched = true;\n        const p = new Promise(pcall).then(cb, eb);\n        p.__abortController = ac;\n        p.__staleWhileFetching = v;\n        p.__returned = null;\n        if (index === undefined) {\n            // internal, don't expose status.\n            this.set(k, p, {\n                ...fetchOpts.options,\n                status: undefined\n            });\n            index = this.keyMap.get(k);\n        } else {\n            this.valList[index] = p;\n        }\n        return p;\n    }\n    isBackgroundFetch(p) {\n        return p && typeof p === \"object\" && typeof p.then === \"function\" && Object.prototype.hasOwnProperty.call(p, \"__staleWhileFetching\") && Object.prototype.hasOwnProperty.call(p, \"__returned\") && (p.__returned === p || p.__returned === null);\n    }\n    // this takes the union of get() and set() opts, because it does both\n    async fetch(k, { // get options\n    allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, // set options\n    ttl = this.ttl, noDisposeOnSet = this.noDisposeOnSet, size = 0, sizeCalculation = this.sizeCalculation, noUpdateTTL = this.noUpdateTTL, // fetch exclusive options\n    noDeleteOnFetchRejection = this.noDeleteOnFetchRejection, allowStaleOnFetchRejection = this.allowStaleOnFetchRejection, ignoreFetchAbort = this.ignoreFetchAbort, allowStaleOnFetchAbort = this.allowStaleOnFetchAbort, fetchContext = this.fetchContext, forceRefresh = false, status, signal } = {}) {\n        if (!this.fetchMethod) {\n            if (status) status.fetch = \"get\";\n            return this.get(k, {\n                allowStale,\n                updateAgeOnGet,\n                noDeleteOnStaleGet,\n                status\n            });\n        }\n        const options = {\n            allowStale,\n            updateAgeOnGet,\n            noDeleteOnStaleGet,\n            ttl,\n            noDisposeOnSet,\n            size,\n            sizeCalculation,\n            noUpdateTTL,\n            noDeleteOnFetchRejection,\n            allowStaleOnFetchRejection,\n            allowStaleOnFetchAbort,\n            ignoreFetchAbort,\n            status,\n            signal\n        };\n        let index = this.keyMap.get(k);\n        if (index === undefined) {\n            if (status) status.fetch = \"miss\";\n            const p = this.backgroundFetch(k, index, options, fetchContext);\n            return p.__returned = p;\n        } else {\n            // in cache, maybe already fetching\n            const v = this.valList[index];\n            if (this.isBackgroundFetch(v)) {\n                const stale = allowStale && v.__staleWhileFetching !== undefined;\n                if (status) {\n                    status.fetch = \"inflight\";\n                    if (stale) status.returnedStale = true;\n                }\n                return stale ? v.__staleWhileFetching : v.__returned = v;\n            }\n            // if we force a refresh, that means do NOT serve the cached value,\n            // unless we are already in the process of refreshing the cache.\n            const isStale = this.isStale(index);\n            if (!forceRefresh && !isStale) {\n                if (status) status.fetch = \"hit\";\n                this.moveToTail(index);\n                if (updateAgeOnGet) {\n                    this.updateItemAge(index);\n                }\n                this.statusTTL(status, index);\n                return v;\n            }\n            // ok, it is stale or a forced refresh, and not already fetching.\n            // refresh the cache.\n            const p = this.backgroundFetch(k, index, options, fetchContext);\n            const hasStale = p.__staleWhileFetching !== undefined;\n            const staleVal = hasStale && allowStale;\n            if (status) {\n                status.fetch = hasStale && isStale ? \"stale\" : \"refresh\";\n                if (staleVal && isStale) status.returnedStale = true;\n            }\n            return staleVal ? p.__staleWhileFetching : p.__returned = p;\n        }\n    }\n    get(k, { allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, status } = {}) {\n        const index = this.keyMap.get(k);\n        if (index !== undefined) {\n            const value = this.valList[index];\n            const fetching = this.isBackgroundFetch(value);\n            this.statusTTL(status, index);\n            if (this.isStale(index)) {\n                if (status) status.get = \"stale\";\n                // delete only if not an in-flight background fetch\n                if (!fetching) {\n                    if (!noDeleteOnStaleGet) {\n                        this.delete(k);\n                    }\n                    if (status) status.returnedStale = allowStale;\n                    return allowStale ? value : undefined;\n                } else {\n                    if (status) {\n                        status.returnedStale = allowStale && value.__staleWhileFetching !== undefined;\n                    }\n                    return allowStale ? value.__staleWhileFetching : undefined;\n                }\n            } else {\n                if (status) status.get = \"hit\";\n                // if we're currently fetching it, we don't actually have it yet\n                // it's not stale, which means this isn't a staleWhileRefetching.\n                // If it's not stale, and fetching, AND has a __staleWhileFetching\n                // value, then that means the user fetched with {forceRefresh:true},\n                // so it's safe to return that value.\n                if (fetching) {\n                    return value.__staleWhileFetching;\n                }\n                this.moveToTail(index);\n                if (updateAgeOnGet) {\n                    this.updateItemAge(index);\n                }\n                return value;\n            }\n        } else if (status) {\n            status.get = \"miss\";\n        }\n    }\n    connect(p, n) {\n        this.prev[n] = p;\n        this.next[p] = n;\n    }\n    moveToTail(index) {\n        // if tail already, nothing to do\n        // if head, move head to next[index]\n        // else\n        //   move next[prev[index]] to next[index] (head has no prev)\n        //   move prev[next[index]] to prev[index]\n        // prev[index] = tail\n        // next[tail] = index\n        // tail = index\n        if (index !== this.tail) {\n            if (index === this.head) {\n                this.head = this.next[index];\n            } else {\n                this.connect(this.prev[index], this.next[index]);\n            }\n            this.connect(this.tail, index);\n            this.tail = index;\n        }\n    }\n    get del() {\n        deprecatedMethod(\"del\", \"delete\");\n        return this.delete;\n    }\n    delete(k) {\n        let deleted = false;\n        if (this.size !== 0) {\n            const index = this.keyMap.get(k);\n            if (index !== undefined) {\n                deleted = true;\n                if (this.size === 1) {\n                    this.clear();\n                } else {\n                    this.removeItemSize(index);\n                    const v = this.valList[index];\n                    if (this.isBackgroundFetch(v)) {\n                        v.__abortController.abort(new Error(\"deleted\"));\n                    } else {\n                        this.dispose(v, k, \"delete\");\n                        if (this.disposeAfter) {\n                            this.disposed.push([\n                                v,\n                                k,\n                                \"delete\"\n                            ]);\n                        }\n                    }\n                    this.keyMap.delete(k);\n                    this.keyList[index] = null;\n                    this.valList[index] = null;\n                    if (index === this.tail) {\n                        this.tail = this.prev[index];\n                    } else if (index === this.head) {\n                        this.head = this.next[index];\n                    } else {\n                        this.next[this.prev[index]] = this.next[index];\n                        this.prev[this.next[index]] = this.prev[index];\n                    }\n                    this.size--;\n                    this.free.push(index);\n                }\n            }\n        }\n        if (this.disposed) {\n            while(this.disposed.length){\n                this.disposeAfter(...this.disposed.shift());\n            }\n        }\n        return deleted;\n    }\n    clear() {\n        for (const index of this.rindexes({\n            allowStale: true\n        })){\n            const v = this.valList[index];\n            if (this.isBackgroundFetch(v)) {\n                v.__abortController.abort(new Error(\"deleted\"));\n            } else {\n                const k = this.keyList[index];\n                this.dispose(v, k, \"delete\");\n                if (this.disposeAfter) {\n                    this.disposed.push([\n                        v,\n                        k,\n                        \"delete\"\n                    ]);\n                }\n            }\n        }\n        this.keyMap.clear();\n        this.valList.fill(null);\n        this.keyList.fill(null);\n        if (this.ttls) {\n            this.ttls.fill(0);\n            this.starts.fill(0);\n        }\n        if (this.sizes) {\n            this.sizes.fill(0);\n        }\n        this.head = 0;\n        this.tail = 0;\n        this.initialFill = 1;\n        this.free.length = 0;\n        this.calculatedSize = 0;\n        this.size = 0;\n        if (this.disposed) {\n            while(this.disposed.length){\n                this.disposeAfter(...this.disposed.shift());\n            }\n        }\n    }\n    get reset() {\n        deprecatedMethod(\"reset\", \"clear\");\n        return this.clear;\n    }\n    get length() {\n        deprecatedProperty(\"length\", \"size\");\n        return this.size;\n    }\n    static get AbortController() {\n        return AC;\n    }\n    static get AbortSignal() {\n        return AS;\n    }\n}\nmodule.exports = LRUCache;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/named-placeholders/node_modules/lru-cache/index.js\n");

/***/ })

};
;