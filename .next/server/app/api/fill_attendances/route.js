"use strict";(()=>{var e={};e.id=189,e.ids=[189],e.modules={517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},4300:e=>{e.exports=require("buffer")},6113:e=>{e.exports=require("crypto")},2361:e=>{e.exports=require("events")},1808:e=>{e.exports=require("net")},7282:e=>{e.exports=require("process")},2781:e=>{e.exports=require("stream")},1576:e=>{e.exports=require("string_decoder")},9512:e=>{e.exports=require("timers")},4404:e=>{e.exports=require("tls")},7310:e=>{e.exports=require("url")},3837:e=>{e.exports=require("util")},9796:e=>{e.exports=require("zlib")},2804:(e,r,t)=>{t.r(r),t.d(r,{headerHooks:()=>m,originalPathname:()=>g,requestAsyncStorage:()=>E,routeModule:()=>d,serverHooks:()=>f,staticGenerationAsyncStorage:()=>p,staticGenerationBailout:()=>w});var s={};t.r(s),t.d(s,{GET:()=>l}),t(5655);var o=t(3323),i=t(4647),n=t(6886),a=t(5055);t(2160);let u=class{static getAllUsers(){return new Promise(e=>{try{a.Z.query("SELECT * FROM users",(r,t,s)=>{if(r)throw r;e(t)})}catch(e){throw e}})}static getByUserID(e){return new Promise(r=>{try{console.log("----ID----",e),a.Z.query("SELECT * FROM users WHERE id = "+e,function(e,t,s){if(e)throw e;r(t)})}catch(e){throw e}})}static getUserByEmail(e){return new Promise(r=>{try{console.log("----EMAIL----",e),a.Z.query(`SELECT * FROM users WHERE email = "${e}"`,function(e,t,s){if(e)throw e;r(t)})}catch(e){throw e}})}static getUserEmail(e){return console.log("DADADADADADADADA: ",e),new Promise(r=>{a.Z.query(`SELECT email FROM users WHERE email = "${e}"`,function(e,t,s){if(e)throw console.log(e),e;r(t)})})}static getUserPassword(e){return new Promise(r=>{a.Z.query(`SELECT password FROM users WHERE email = "${e}"`,function(e,t,s){if(e)throw console.log(e),e;r(t)})})}static addUser(e){return console.log("the userData: ----",e),new Promise(r=>{void 0!==e?a.Z.query("INSERT INTO users(email, password, forgotPasswordToken, forgotPasswordTokenExpiry, isAdmin, isVerified, verifyToken, verifyTokenExpiry) VALUES(?, ?, ?, ?, ?, ?, ?, ?)",[e.email,e.password,e.forgotPasswordToken,e.forgotPasswordTokenExpiry,e.isAdmin,e.isVerified,e.verifyToken,e.verifyTokenExpiry],function(e,t,s){if(e)throw e;a.Z.query("SELECT LAST_INSERT_ID()",function(e,t,s){if(e)throw e;r(t[0]["LAST_INSERT_ID()"])})}):r(Error(config.errors.noNameValue))})}static updateUser(e,r){return new Promise(t=>{console.log("PARAMS IN THE DB QUERY: ",r),void 0!==r?a.Z.query("UPDATE users SET email = ?, password = ? WHERE id = ?",[r.email,r.password,e],function(e,r,s){if(e)throw e;t(r)}):t(Error(config.errors.noNameValue))})}static deleteUser(e){try{return new Promise(r=>{db.query(`DELETE FROM user WHERE id = ${e}`,function(e,t,s){if(e)throw e;r(t)})})}catch(e){}}},l=async e=>{console.log("IT CAME HERE.......");try{let e=await u.getAllUsers();return n.Z.json({message:"Reservations Listed Successfully",reservationsData:e},{status:200})}catch(e){return n.Z.json({message:"Error",error:e},{status:500})}},c=o.AppRouteRouteModule,d=new c({definition:{kind:i.x.APP_ROUTE,page:"/api/fill_attendances/route",pathname:"/api/fill_attendances",filename:"route",bundlePath:"app/api/fill_attendances/route"},resolvedPagePath:"/home/ivans/Documents/attendance/workshop-registration/src/app/api/fill_attendances/route.js",nextConfigOutput:"",userland:s}),{requestAsyncStorage:E,staticGenerationAsyncStorage:p,serverHooks:f,headerHooks:m,staticGenerationBailout:w}=d,g="/api/fill_attendances/route"}};var r=require("../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[882,727,392,127],()=>t(2804));module.exports=s})();